# Fixed PCSCF Deployment - Avec inclusion explicite des routes NAT
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pcscf
  labels:
    io.kompose.service: pcscf
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: pcscf
  template:
    metadata:
      labels:
        io.kompose.service: pcscf
    spec:
      containers:
        - name: pcscf
          image: default-route-openshift-image-registry.apps-crc.testing/ims/docker_kamailio:latest
          command:
            - /bin/bash
            - -c
            - |
              echo "Starting PCSCF with all required routes..."
              
              # Copy all files
              cp /etc/kamailio-config/* /usr/local/etc/kamailio/ 2>/dev/null || true
              mkdir -p /usr/local/etc/kamailio/route
              
              # Get pod IP
              POD_IP=$(hostname -i)
              MYSQL_SERVICE_IP="mysql.ims.svc.cluster.local"
              echo "Pod IP: $POD_IP"
              
              # Create required directories for PCSCF
              echo "=== Creating PCSCF directories ==="
              mkdir -p /etc/kamailio_pcscf
              
              # Create dispatcher.list file for PCSCF
              echo "=== Creating dispatcher.list for PCSCF ==="
              cat > /etc/kamailio_pcscf/dispatcher.list << 'EOF'
              # PCSCF Dispatcher List
              # Format: setid(int) destination(sip uri) flags(int,opt) priority(int,opt) attrs(str,opt)
              1 sip:127.0.0.1:5060 0 0
              EOF
              echo "✓ dispatcher.list created for PCSCF"
              
              # Create pcscf.xml file
              echo "=== Creating pcscf.xml for PCSCF ==="
              cat > /etc/kamailio_pcscf/pcscf.xml << 'EOF'
              <?xml version="1.0" encoding="UTF-8"?>
              <DiameterPeer FQDN="pcscf.ims" Realm="ims" VendorId="0" ProductName="PCSCF" FirmwareRevision="1">
                  <Peer FQDN="hss.ims" Realm="ims" Port="3868"/>
                  <Acceptor Port="3868"/>
                  <SupportedVendor VendorId="0" AuthApplicationId="16777216"/>
                  <Auth>
                      <SessionTimer>60</SessionTimer>
                      <SessionGraceTimer>60</SessionGraceTimer>
                  </Auth>
              </DiameterPeer>
              EOF
              echo "✓ pcscf.xml created for PCSCF"
              
              # Create all required route files
              echo "=== Creating all route files ==="
              
              cat > /usr/local/etc/kamailio/route/xmlrpc.cfg << 'EOF'
              route[XMLRPC] {
                  if ((method=="POST" || method=="GET") && uri=~"^/RPC") {
                      set_reply_no_connect();
                      dispatch_rpc();
                      exit;
                  }
                  return;
              }
              EOF
              
              cat > /usr/local/etc/kamailio/route/websocket.cfg << 'EOF'
              route[WEBSOCKET] {
                  if (nat_uac_test(64)) {
                      force_rport();
                      if (is_method("REGISTER")) {
                          fix_nated_register();
                      }
                  }
                  return;
              }
              EOF
              
              cat > /usr/local/etc/kamailio/route/register.cfg << 'EOF'
              route[REGISTER] {
                  xlog("L_INFO", "PCSCF: Processing REGISTER request\n");
                  if (!t_relay()) {
                      sl_reply_error();
                  }
                  exit;
              }
              EOF
              
              # Route NAT avec NATMANAGE
              cat > /usr/local/etc/kamailio/route/nat.cfg << 'EOF'
              route[NATMANAGE] {
                  xlog("L_INFO", "PCSCF: NAT management processing\n");
                  
                  if (is_request()) {
                      if (has_totag()) {
                          if (check_route_param("nat=yes")) {
                              setbflag(6);
                          }
                      }
                  }
                  
                  if (!(isflagset(5) || isbflagset(6))) {
                      return;
                  }
                  
                  if (is_request()) {
                      if (!has_totag()) {
                          if (t_is_branch_route()) {
                              add_rr_param(";nat=yes");
                          }
                      }
                  }
                  
                  if (is_reply()) {
                      if (isbflagset(6)) {
                          force_rport();
                      }
                  }
                  
                  return;
              }
              
              route[NATDETECT] {
                  xlog("L_INFO", "PCSCF: NAT detection\n");
                  force_rport();
                  if (nat_uac_test("19")) {
                      if (is_method("REGISTER")) {
                          fix_nated_register();
                      } else {
                          setflag(5);
                      }
                  }
                  return;
              }
              EOF
              
              # Routes RTP avec toutes les fonctions
              cat > /usr/local/etc/kamailio/route/rtp.cfg << 'EOF'
              route[RTP] {
                  xlog("L_INFO", "PCSCF: RTP processing\n");
                  return;
              }
              
              route[RTPENGINE_OFFER] {
                  xlog("L_INFO", "PCSCF: RTP engine offer\n");
                  return;
              }
              
              route[RTPENGINE_ANSWER] {
                  xlog("L_INFO", "PCSCF: RTP engine answer\n");
                  return;
              }
              
              route[RTPENGINE_MANAGE] {
                  xlog("L_INFO", "PCSCF: RTP engine management\n");
                  return;
              }
              
              route[ENC_RTP] {
                  xlog("L_INFO", "PCSCF: RTP encryption processing\n");
                  return;
              }
              
              route[ENC_SRTP] {
                  xlog("L_INFO", "PCSCF: SRTP encryption processing\n");
                  return;
              }
              
              route[ENC_WS_RTP] {
                  xlog("L_INFO", "PCSCF: WebSocket RTP encryption processing\n");
                  return;
              }
              
              route[ENC_WSS_RTP] {
                  xlog("L_INFO", "PCSCF: WebSocket Secure RTP encryption processing\n");
                  return;
              }
              EOF
              
              cat > /usr/local/etc/kamailio/route/mo.cfg << 'EOF'
              route[MO] {
                  xlog("L_INFO", "PCSCF: Processing Mobile Originating request\n");
                  record_route();
                  if (!t_relay()) {
                      sl_reply_error();
                  }
                  exit;
              }
              EOF
              
              cat > /usr/local/etc/kamailio/route/mt.cfg << 'EOF'
              route[MT] {
                  xlog("L_INFO", "PCSCF: Processing Mobile Terminating request\n");
                  if (!t_relay()) {
                      sl_reply_error();
                  }
                  exit;
              }
              EOF
              
              echo "✓ All route files created"
              
              # CORRECTION CRITIQUE: Injecter l'inclusion de nat.cfg dans kamailio_pcscf.cfg
              echo "=== Injecting nat.cfg inclusion into main config ==="
              if ! grep -q "import_file.*nat.cfg" /usr/local/etc/kamailio/kamailio_pcscf.cfg; then
                # Trouver la ligne avec les autres imports et ajouter nat.cfg
                sed -i '/import_file.*route\/register.cfg/a import_file "route/nat.cfg"' /usr/local/etc/kamailio/kamailio_pcscf.cfg
                echo "✓ nat.cfg inclusion added to main config"
              else
                echo "✓ nat.cfg already included"
              fi
              
              # Comprehensive variable replacement
              echo "=== Comprehensive variable replacement ==="
              find /usr/local/etc/kamailio -name "*.cfg" | while read file; do
                echo "Processing variables in: $file"
                sed -i "s/PCSCF_IP/$POD_IP/g" "$file"
                sed -i "s/LISTEN_IP/$POD_IP/g" "$file"
                sed -i "s/NETWORK_IP/$POD_IP/g" "$file"
                sed -i "s/MYSQL_IP/$MYSQL_SERVICE_IP/g" "$file"
                sed -i 's/UE_SUBSCRIPTION_EXPIRES/3605/g' "$file"
                sed -i 's/SUBSCRIPTION_EXPIRES_ENV/3605/g' "$file"
                sed -i 's/TCP_PROCESSES/4/g' "$file"
                sed -i 's/PCSCF_PROCESSES/4/g' "$file"
                sed -i 's/SHM_MEM/64/g' "$file"
                sed -i 's/PKG_MEM/8/g' "$file"
              done
              
              echo "=== Verifying variable replacements ==="
              grep -r "SUBSCRIPTION_EXPIRES_ENV" /usr/local/etc/kamailio/*.cfg || echo "✓ SUBSCRIPTION_EXPIRES_ENV replaced"
              
              # Global preprocessor directive balancing
              echo "=== Global preprocessor directive balancing ==="
              
              total_ifdef=$(find /usr/local/etc/kamailio -name "*.cfg" -exec grep -h "^[[:space:]]*#!ifdef\|^[[:space:]]*#!ifndef" {} \; | wc -l)
              total_endif=$(find /usr/local/etc/kamailio -name "*.cfg" -exec grep -h "^[[:space:]]*#!endif" {} \; | wc -l)
              
              echo "Global count - ifdef/ifndef: $total_ifdef, endif: $total_endif"
              
              if [ $total_ifdef -gt $total_endif ]; then
                missing=$((total_ifdef - total_endif))
                echo "⚠ Missing $missing #!endif directive(s) - Adding to main config file"
                
                for i in $(seq 1 $missing); do
                  echo "" >> /usr/local/etc/kamailio/kamailio_pcscf.cfg
                  echo "#!endif" >> /usr/local/etc/kamailio/kamailio_pcscf.cfg
                done
              else
                echo "⚠ Counts balanced but forcing +1 #!endif for Kamailio parser context"
                echo "" >> /usr/local/etc/kamailio/kamailio_pcscf.cfg
                echo "#!endif" >> /usr/local/etc/kamailio/kamailio_pcscf.cfg
              fi
              
              # Clean all config files
              echo "=== Cleaning all config files ==="
              find /usr/local/etc/kamailio -name "*.cfg" | while read file; do
                temp_file=$(mktemp)
                sed 's/#!endif.*/#!endif/' "$file" | awk '{ print }' > "$temp_file"
                echo "" >> "$temp_file"
                echo "" >> "$temp_file"
                mv "$temp_file" "$file"
              done
              
              # Final global verification
              echo "=== Final global verification ==="
              total_ifdef=$(find /usr/local/etc/kamailio -name "*.cfg" -exec grep -h "^[[:space:]]*#!ifdef\|^[[:space:]]*#!ifndef" {} \; | wc -l)
              total_endif=$(find /usr/local/etc/kamailio -name "*.cfg" -exec grep -h "^[[:space:]]*#!endif" {} \; | wc -l)
              echo "Final global count - ifdef/ifndef: $total_ifdef, endif: $total_endif"
              
              # Verify nat.cfg inclusion
              echo "=== Verifying nat.cfg inclusion ==="
              grep -n "nat.cfg" /usr/local/etc/kamailio/kamailio_pcscf.cfg || echo "WARNING: nat.cfg not found in includes"
              
              # Set library path and test configuration
              export LD_LIBRARY_PATH="/usr/local/lib64:/usr/lib64:$LD_LIBRARY_PATH"
              
              echo "=== Testing Kamailio configuration ==="
              if kamailio -c -f /usr/local/etc/kamailio/kamailio_pcscf.cfg; then
                echo "✓ Configuration syntax OK - Starting Kamailio PCSCF..."
                exec kamailio -f /usr/local/etc/kamailio/kamailio_pcscf.cfg -P /tmp/kamailio.pid -DD -E -e
              else
                echo "✗ Configuration error - showing details:"
                echo "=== Checking import_file directives ==="
                grep "import_file" /usr/local/etc/kamailio/kamailio_pcscf.cfg
                echo "=== Available route files ==="
                ls -la /usr/local/etc/kamailio/route/
                echo "=== Error details ==="
                kamailio -c -f /usr/local/etc/kamailio/kamailio_pcscf.cfg 2>&1 | grep -A5 "ERROR"
                sleep infinity
              fi
          env:
            - name: COMPONENT_NAME
              value: pcscf
          volumeMounts:
            - name: pcscf-config
              mountPath: /etc/kamailio-config
          ports:
            - containerPort: 5060
              protocol: UDP
            - containerPort: 5060
              protocol: TCP
      volumes:
        - name: pcscf-config
          configMap:
            name: pcscf-config
      restartPolicy: Always
---
# Fixed ICSCF Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: icscf
  labels:
    io.kompose.service: icscf
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: icscf
  template:
    metadata:
      labels:
        io.kompose.service: icscf
    spec:
      containers:
        - name: icscf
          image: default-route-openshift-image-registry.apps-crc.testing/ims/docker_kamailio:latest
          command:
            - /bin/bash
            - -c
            - |
              echo "Starting ICSCF with corrected configuration..."
              
              # Copy files
              cp /etc/kamailio-config/* /usr/local/etc/kamailio/ 2>/dev/null || true
              
              # Get IPs
              POD_IP=$(hostname -i)
              MYSQL_SERVICE_IP="mysql.ims.svc.cluster.local"
              HSS_SERVICE_IP="hss.ims.svc.cluster.local"
              echo "Pod IP: $POD_IP"
              
              # Create required directories for ICSCF
              echo "=== Creating ICSCF directories ==="
              mkdir -p /etc/kamailio_icscf
              
              # Create icscf.xml file (missing file causing error)
              echo "=== Creating icscf.xml for ICSCF ==="
              cat > /etc/kamailio_icscf/icscf.xml << 'EOF'
              <?xml version="1.0" encoding="UTF-8"?>
              <DiameterPeer FQDN="icscf.ims" Realm="ims" VendorId="0" ProductName="ICSCF" FirmwareRevision="1">
                  <Peer FQDN="hss.ims" Realm="ims" Port="3868"/>
                  <Acceptor Port="3868"/>
                  <SupportedVendor VendorId="0" AuthApplicationId="16777216"/>
                  <Auth>
                      <SessionTimer>60</SessionTimer>
                      <SessionGraceTimer>60</SessionGraceTimer>
                  </Auth>
              </DiameterPeer>
              EOF
              echo "✓ icscf.xml created for ICSCF"
              
              # Wait for MySQL and create ICSCF user
              echo "=== Waiting for MySQL and creating ICSCF user ==="
              for i in {1..20}; do
                if timeout 5 bash -c '</dev/tcp/mysql.ims.svc.cluster.local/3306' 2>/dev/null; then
                  echo "✓ MySQL is ready!"
                  break
                else
                  echo "MySQL not ready, waiting... ($i/20)"
                  sleep 3
                fi
              done
              
              # Create MySQL user for ICSCF
              mysql -h mysql.ims.svc.cluster.local -u root -plinux -e "
                CREATE USER IF NOT EXISTS 'icscf'@'%' IDENTIFIED BY 'heslo';
                GRANT ALL PRIVILEGES ON icscf.* TO 'icscf'@'%';
                CREATE DATABASE IF NOT EXISTS icscf;
                FLUSH PRIVILEGES;
              " 2>/dev/null || echo "MySQL user creation skipped (may already exist)"
              
              # Comprehensive variable replacement
              echo "=== Comprehensive variable replacement ==="
              find /usr/local/etc/kamailio -name "*.cfg" | while read file; do
                echo "Processing variables in: $file"
                sed -i "s/ICSCF_IP/$POD_IP/g" "$file"
                sed -i "s/LISTEN_IP/$POD_IP/g" "$file"
                sed -i "s/NETWORK_IP/$POD_IP/g" "$file"
                sed -i "s/MYSQL_IP/$MYSQL_SERVICE_IP/g" "$file"
                sed -i "s/HSS_IP/$HSS_SERVICE_IP/g" "$file"
                sed -i 's/UE_SUBSCRIPTION_EXPIRES/3605/g' "$file"
                sed -i 's/SUBSCRIPTION_EXPIRES_ENV/3605/g' "$file"
                sed -i 's/TCP_PROCESSES/4/g' "$file"
                sed -i 's/ICSCF_PROCESSES/4/g' "$file"
                sed -i 's/SHM_MEM/64/g' "$file"
                sed -i 's/PKG_MEM/8/g' "$file"
                sed -i "s/listen=tcp:127.0.0.1:4060/listen=tcp:$POD_IP:4060/g" "$file"
              done
              
              # CORRECTION GLOBALE : Équilibrer les directives dans TOUS les fichiers
              echo "=== Global preprocessor directive balancing ==="
              
              total_ifdef=$(find /usr/local/etc/kamailio -name "*.cfg" -exec grep -h "^[[:space:]]*#!ifdef\|^[[:space:]]*#!ifndef" {} \; | wc -l)
              total_endif=$(find /usr/local/etc/kamailio -name "*.cfg" -exec grep -h "^[[:space:]]*#!endif" {} \; | wc -l)
              
              echo "Global count - ifdef/ifndef: $total_ifdef, endif: $total_endif"
              
              if [ $total_ifdef -gt $total_endif ]; then
                missing=$((total_ifdef - total_endif))
                echo "⚠ Missing $missing #!endif directive(s) - Adding to main config"
                
                for i in $(seq 1 $missing); do
                  echo "" >> /usr/local/etc/kamailio/kamailio_icscf.cfg
                  echo "#!endif" >> /usr/local/etc/kamailio/kamailio_icscf.cfg
                done
              else
                # FORCE: Même si équilibré, Kamailio compte mal à cause du contexte entre fichiers
                echo "⚠ Counts balanced but forcing +1 #!endif for Kamailio parser context"
                echo "" >> /usr/local/etc/kamailio/kamailio_icscf.cfg
                echo "#!endif" >> /usr/local/etc/kamailio/kamailio_icscf.cfg
              fi
              
              # Nettoyer tous les fichiers
              echo "=== Cleaning all config files ==="
              find /usr/local/etc/kamailio -name "*.cfg" | while read file; do
                temp_file=$(mktemp)
                sed 's/#!endif.*/#!endif/' "$file" | awk '{ print }' > "$temp_file"
                echo "" >> "$temp_file"
                echo "" >> "$temp_file"
                mv "$temp_file" "$file"
              done
              
              # Vérification finale
              echo "=== Final global verification ==="
              total_ifdef=$(find /usr/local/etc/kamailio -name "*.cfg" -exec grep -h "^[[:space:]]*#!ifdef\|^[[:space:]]*#!ifndef" {} \; | wc -l)
              total_endif=$(find /usr/local/etc/kamailio -name "*.cfg" -exec grep -h "^[[:space:]]*#!endif" {} \; | wc -l)
              echo "Final count - ifdef/ifndef: $total_ifdef, endif: $total_endif"
              
              # Set library path
              export LD_LIBRARY_PATH="/usr/local/lib64:/usr/lib64:$LD_LIBRARY_PATH"
              
              echo "=== Testing Kamailio configuration ==="
              if kamailio -c -f /usr/local/etc/kamailio/kamailio_icscf.cfg; then
                echo "✓ Configuration syntax OK - Starting Kamailio ICSCF..."
                exec kamailio -f /usr/local/etc/kamailio/kamailio_icscf.cfg -P /tmp/kamailio.pid -DD -E -e
              else
                echo "✗ Configuration error - per-file analysis:"
                find /usr/local/etc/kamailio -name "*.cfg" -exec sh -c 'echo "=== {} ==="; grep -c "#!ifdef\|#!ifndef" {} | xargs echo "ifdef/ifndef:"; grep -c "#!endif" {} | xargs echo "endif:"' \;
                kamailio -c -f /usr/local/etc/kamailio/kamailio_icscf.cfg 2>&1 | head -10
                sleep infinity
              fi
          env:
            - name: COMPONENT_NAME
              value: icscf
          volumeMounts:
            - name: icscf-config
              mountPath: /etc/kamailio-config
          ports:
            - containerPort: 5060
              protocol: UDP
            - containerPort: 5060
              protocol: TCP
            - containerPort: 4060
              protocol: TCP
      volumes:
        - name: icscf-config
          configMap:
            name: icscf-config
      restartPolicy: Always

---
# SCSCF Deployment - NON MODIFIÉ (garde ton script qui fonctionne)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scscf
  labels:
    io.kompose.service: scscf
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: scscf
  template:
    metadata:
      labels:
        io.kompose.service: scscf
    spec:
      containers:
        - name: scscf
          image: default-route-openshift-image-registry.apps-crc.testing/ims/docker_kamailio:latest
          command:
            - /bin/bash
            - -c
            - |
              echo "Starting SCSCF with dispatcher fix..."
              
              # Copy files
              cp /etc/kamailio-config/* /usr/local/etc/kamailio/ 2>/dev/null || true
              
              # Get IPs
              POD_IP=$(hostname -i)
              MYSQL_SERVICE_IP="mysql.ims.svc.cluster.local"
              HSS_SERVICE_IP="hss.ims.svc.cluster.local"
              ICSCF_SERVICE_IP="icscf.ims.svc.cluster.local"
              echo "Pod IP: $POD_IP"
              
              # Wait for MySQL
              echo "Waiting for MySQL..."
              for i in {1..20}; do
                if timeout 5 bash -c '</dev/tcp/mysql.ims.svc.cluster.local/3306' 2>/dev/null; then
                  echo "✓ MySQL is ready!"
                  break
                else
                  echo "MySQL not ready, waiting... ($i/20)"
                  sleep 3
                fi
              done
              
              # Create required directories for dispatcher
              echo "=== Creating dispatcher directories ==="
              mkdir -p /etc/kamailio_scscf
              mkdir -p /etc/kamailio_icscf  
              mkdir -p /etc/kamailio_pcscf
              
              # Copy dispatcher and XML files
              if [ -f "/usr/local/etc/kamailio/dispatcher.list" ]; then
                cp /usr/local/etc/kamailio/dispatcher.list /etc/kamailio_scscf/
                echo "✓ dispatcher.list copied to /etc/kamailio_scscf/"
              else
                echo "# SCSCF Dispatcher List" > /etc/kamailio_scscf/dispatcher.list
                echo "✓ Empty dispatcher.list created"
              fi
              
              # Copy scscf.xml file
              if [ -f "/usr/local/etc/kamailio/scscf.xml" ]; then
                cp /usr/local/etc/kamailio/scscf.xml /etc/kamailio_scscf/
                echo "✓ scscf.xml copied to /etc/kamailio_scscf/"
              else
                echo "Warning: scscf.xml not found in /usr/local/etc/kamailio/"
              fi
              
              # Comprehensive variable replacement including ALL possible variables
              echo "=== Comprehensive variable replacement ==="
              find /usr/local/etc/kamailio -type f | while read file; do
                if [ -f "$file" ]; then
                  echo "Processing: $file"
                  sed -i "s/SCSCF_IP/$POD_IP/g" "$file"
                  sed -i "s/LISTEN_IP/$POD_IP/g" "$file"
                  sed -i "s/NETWORK_IP/$POD_IP/g" "$file"
                  sed -i "s/MYSQL_IP/$MYSQL_SERVICE_IP/g" "$file"
                  sed -i "s/HSS_IP/$HSS_SERVICE_IP/g" "$file"
                  sed -i "s/ICSCF_IP/$ICSCF_SERVICE_IP/g" "$file"
                  sed -i 's/UE_SUBSCRIPTION_EXPIRES/3605/g' "$file"
                  sed -i 's/SUBSCRIPTION_EXPIRES_ENV/3605/g' "$file"
                  sed -i 's/TCP_PROCESSES/4/g' "$file"
                  sed -i 's/SCSCF_PROCESSES/4/g' "$file"
                  sed -i 's/SHM_MEM/64/g' "$file"
                  sed -i 's/PKG_MEM/8/g' "$file"
                  sed -i "s/listen=tcp:127.0.0.1:6060/listen=tcp:$POD_IP:6060/g" "$file"
                  sed -i "s/listen=udp:.*:5060/listen=udp:$POD_IP:5060/g" "$file"
                  sed -i "s/listen=tcp:.*:5060/listen=tcp:$POD_IP:5060/g" "$file"
                fi
              done
              
              # Fix preprocessor directives for .cfg files
              find /usr/local/etc/kamailio -name "*.cfg" | while read file; do
                echo "Fixing preprocessor in: $file"
                temp_file=$(mktemp)
                awk '
                  /^[[:space:]]*#!endif/ { print "#!endif"; next }
                  { print }
                  END { print "" }
                ' "$file" > "$temp_file"
                mv "$temp_file" "$file"
              done
              
              # Create MySQL user if needed
              echo "=== Creating MySQL user ==="
              mysql -h mysql.ims.svc.cluster.local -u root -plinux -e "
                CREATE USER IF NOT EXISTS 'scscf'@'%' IDENTIFIED BY 'heslo';
                GRANT ALL PRIVILEGES ON scscf.* TO 'scscf'@'%';
                FLUSH PRIVILEGES;
              " 2>/dev/null || echo "MySQL user creation skipped (may already exist)"
              
              # Verify dispatcher file exists
              echo "=== Verifying dispatcher file ==="
              ls -la /etc/kamailio_scscf/dispatcher.list
              echo "Dispatcher file content:"
              head -3 /etc/kamailio_scscf/dispatcher.list || echo "Empty file"
              
              # Set library path and test
              export LD_LIBRARY_PATH="/usr/local/lib64:/usr/lib64:$LD_LIBRARY_PATH"
              
              echo "=== Testing Kamailio configuration ==="
              if kamailio -c -f /usr/local/etc/kamailio/kamailio_scscf.cfg; then
                echo "✓ Configuration syntax OK - Starting Kamailio SCSCF..."
                exec kamailio -f /usr/local/etc/kamailio/kamailio_scscf.cfg -P /tmp/kamailio.pid -DD -E -e
              else
                echo "✗ Configuration error - detailed analysis:"
                echo "Checking dispatcher configuration..."
                grep -n "dispatcher" /usr/local/etc/kamailio/kamailio_scscf.cfg | head -5
                kamailio -c -f /usr/local/etc/kamailio/kamailio_scscf.cfg 2>&1 | head -10
                sleep infinity
              fi
          env:
            - name: COMPONENT_NAME
              value: scscf
          volumeMounts:
            - name: scscf-config
              mountPath: /etc/kamailio-config
          ports:
            - containerPort: 5060
              protocol: UDP
            - containerPort: 5060
              protocol: TCP
            - containerPort: 6060
              protocol: UDP
            - containerPort: 6060
              protocol: TCP
      volumes:
        - name: scscf-config
          configMap:
            name: scscf-config
      restartPolicy: Always
